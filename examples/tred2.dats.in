(*

Copyright © 2021 Barry Schwartz

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License, as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received copies of the GNU General Public License
along with this program. If not, see
<https://www.gnu.org/licenses/>.

*)

(*
  FIXME: Wrap this so one can use uninitialized arrays.
           (We can initialize just the portion used,
            without rewriting this all to handle
            uninitialized arrays.)
*)

#define ATS_DYNLOADFLAG 0

#include "share/atspre_define.hats"
#include "share/atspre_staload.hats"

#include "floattypes/HATS/floattypes.hats"

staload "arr2.sats"
staload _ = "arr2.dats"

staload "tred2.sats"

typedef nsize_t (n, i : int) =
  [0 <= i; i <= n] size_t i
typedef nsize_t (n : int) =
  [i : int] nsize_t (n, i)

prfn
lemma_nsize_t_param {n : int} {i : int}
                    (i : nsize_t (n, i)) :<prf>
    [0 <= i; i <= n] void = ()

extern fn {tk : tkind}
internal_tred2 {nm, n : int | n <= nm}
               {na    : int | nm * n <= na}
               {nd    : int | n <= nd}
               {ne    : int | n <= ne}
               {nz    : int | nm * n <= nz}
               (nm    : size_t nm,
                n     : size_t n,
                a     : &(@[INV(g0float(tk))][na]),
                d     : &(@[INV(g0float(tk))][nd]),
                e     : &(@[INV(g0float(tk))][ne]),
                z     : &(@[INV(g0float(tk))][nz])) :<!wrt,!ntm> void

implement {tk}
internal_tred2 {nm, n} {na} {nd} {ne} {nz}
               (nm, n, a, d, e, z) =
  if i2sz 0 < n then
    let
      (* The sizes are nonnegative. *)
      prval _ = lemma_g1uint_param nm
      prval _ = lemma_g1uint_param n

      (* The arrays have extent. *)
      prval _ = mul_gte_gte_gte {nm, n - 1} ()
      prval _ = prop_verify {0 < nm * n} ()

      typedef flt = g0float(tk)
      typedef a_t = @[INV(flt)][na]
      typedef d_t = @[INV(flt)][nd]
      typedef e_t = @[INV(flt)][ne]
      typedef z_t = @[INV(flt)][nz]

      macdef i2flt = g0int2float<intknd,tk>

      fn {}
      nm_by_n_get {narr : int | nm * n <= narr}
                  {i, j : nat | i < nm; j < n}
                  (arr  : &(@[INV(flt)][narr]),
                   i    : size_t i,
                   j    : size_t j) :<> flt =
        arr2get<flt> {nm, n} (nm, arr, i, j)

      fn {}
      nm_by_n_put {narr : int | nm * n <= narr}
                  {i, j : nat | i < nm; j < n}
                  (arr  : &(@[INV(flt)][narr]),
                   i    : size_t i,
                   j    : size_t j,
                   x    : flt) :<!wrt> void =
        arr2put<flt> {nm, n} (nm, arr, i, j, x)

      overload [] with nm_by_n_get of 1000
      overload [] with nm_by_n_put of 1000

      var f : flt = nan("")
      var g : flt = nan("")
      var h : flt = nan("")
      var hh : flt = nan("")
      var scale : flt = nan("")

      fn {}
      simple_situation {i : int | 1 <= i; i < n}
                       (d : &d_t,
                        e : &e_t,
                        z : &z_t,
                        i : nsize_t (n - 1, i)) :<!wrt,!ntm> void =
        let
          var j : nsize_t (i)
        in
          e[i] := d[pred i];
          for (j := i2sz 0; j < i; j := succ j)
            begin
              d[j] := z[pred i, j];
              z[i,j] := i2flt 0;
              z[j,i] := i2flt 0
            end
        end

    in

      (* Copy the lower triangle of a to z, and initialize d. *)
      let
        var j : nsize_t (n)
      in
        for (j := i2sz 0; j < n; j := succ j)
          let
            var i : nsize_t (n)
          in
            for (i := j; i < n; i := succ i)
              z[i,j] := a[i,j];
            d[j] := z[pred n][j]
          end
      end;

      if i2sz 2 <= n then
        let
          var i : nsize_t (n - 1)
        in
          for (i := pred n; isgtz i; i := pred i)
            begin
              h := i2flt 0;
              if i = i2sz 1 then
                simple_situation (d, e, z, i)
              else
                let
                  var k : nsize_t (n)
                in
                  scale := i2flt 0;
                  for (k := i2sz 0; k < i; k := succ k)
                    scale := scale + abs(d[k]);
                  if scale = i2flt 0 then
                    simple_situation (d, e, z, i)
                  else
                    let
                      var j : nsize_t (n)
                    in
                      (*
                       * Scale the row. (Doing this is an
                       * improvement on the original Algol 60
                       * code, and eliminates need for the
                       * ‘tol’ parameter employed there.)
                       *)
                      for (j := i2sz 0; j < i; j := succ j)
                        begin
                          d[j] := d[j] / scale;
                          h := h + d[j] * d[j]
                        end;

                      f := d[i - 1];
                      g := neg(copysign(sqrt(h), f));
                      e[i] := scale * g;
                      h := h - f * g;
                      d[i - 1] := f - g;

                      (* Form a*u. *)
                      for (j := i2sz 0; j < i; j := succ j)
                        e[j] := i2flt 0;
                      for (j := i2sz 0; j < i; j := succ j)
                        begin
                          f := d[j];
                          z[j,i] := f;
                          g := e[j] + z[j,j] * f;
                          if succ j <= pred i then
                            let
                              var k : nsize_t (n)
                            in
                              for (k := succ j; k < i; k := succ k)
                                begin
                                  g := g + z[k,j] * d[k];
                                  e[k] := e[k] + z[k,j] * f;
                                end
                            end;
                          e[j] := g
                        end;

                      (* Form p. *)
                      f := i2flt 0;
                      for (j := i2sz 0; j < i; j := succ j)
                        begin
                          e[j] := e[j] / h;
                          f := f + e[j] * d[j]
                        end;

                      (* Form q. *)
                      hh := f / (h + h);
                      for (j := i2sz 0; j < i; j := succ j)
                        e[j] := e[j] - hh * d[j];

                      (* Form reduced a. *)
                      for (j := i2sz 0; j < i; j := succ j)
                        let
                          var k : nsize_t (n)
                        in
                          f := d[j];
                          g := e[j];
                          for (k := j; k < i; k := succ k)
                            begin
                              z[k,j] := z[k,j] - f * e[k];
                              z[k,j] := z[k,j] - g * d[k]
                            end;
                          d[j] := z[pred i, j];
                          z[i,j] := i2flt 0
                        end
                    end
                end;
              d[i] := h
            end
        end;

      (* Accumulation of transformation matrices. *)
      let
        var i_minus_1 : nsize_t (n - 1)
      in
        for (i_minus_1 := i2sz 0;
             i_minus_1 < pred n;
             i_minus_1 := succ i_minus_1)
          let
            var j : nsize_t (n)
            val i = succ(i_minus_1)
          in
            z[pred n, pred i] := z[pred i, pred i];
            z[pred i, pred i] := i2flt 1;
            h := d[i];
            if h <> i2flt 0 then
              let
                var j : nsize_t (n)
              in
                for (j := i2sz 0; j < i; j := succ j)
                  d[j] := z[j,i] / h;
                for (j := i2sz 0; j < i; j := succ j)
                  let
                    var k : nsize_t (n)
                  in
                    g := i2flt 0;
                    for (k := i2sz 0; k < i; k := succ k)
                       g := g + z[k,i] * z[k,j];
                    for (k := i2sz 0; k < i; k := succ k)
                       z[k,j] := z[k,j] - g * d[k]
                  end
              end;
            for (j := i2sz 0; j < i; j := succ j)
              z[j,i] := i2flt 0
          end
      end;

      let
        var i : nsize_t (n)
      in
        for (i := i2sz 0; i < n; i := succ i)
          begin
            d[i] := z[pred n, i];
            z[pred n, i] := i2flt 0
          end
      end;
      z[pred n, pred n] := i2flt 1;
      e[i2sz 0] := i2flt 0
    end

implement {tk}
tred2 (nm, n, a, d, e, z) =
  let
    (* The sizes are nonnegative. *)
    prval _ = lemma_g1uint_param nm
    prval _ = lemma_g1uint_param n
  in
    (*
     * We have no *proof* of termination, because we
     * used for-loops without termination metrics.
     *
     * However, the user does not need to know that.
     * Therefore mask the !ntm effect.
     *)
    $effmask_ntm (internal_tred2 (nm, n, a, d, e, z))
  end
