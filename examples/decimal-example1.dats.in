(*

Copyright Â© 2021 Barry Schwartz

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License, as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received copies of the GNU General Public License
along with this program. If not, see
<https://www.gnu.org/licenses/>.

*)

#include "share/atspre_define.hats"
#include "share/atspre_staload.hats"

#include "floattypes/HATS/floattypes.hats"

typedef flt = decimal64
macdef i2f = g0int2float
macdef f2f = g0float2float

implement
main0 () =
  let
    var i : int
    var x : flt
    val one_over_increment = 1000000
    val increment = ((i2f 1):flt) / ((i2f one_over_increment):flt)
  in
    i := 0;
    for (x := ((i2f 0):flt); x <> ((i2f 1):flt); x := x + increment)
      begin
        (* This example does not require printing of decimal floating
           point be implemented. *)
        print!((f2f x):double);

        if (succ i) mod 10 = 0 then
          println!()
        else
          print!(" ");
        i := succ i
      end;
    assertloc (i = one_over_increment)
  end
