(*

Copyright Â© 2021 Barry Schwartz

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License, as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received copies of the GNU General Public License
along with this program. If not, see
<https://www.gnu.org/licenses/>.

*)

#define ATS_DYNLOADFLAG 0

#include "share/atspre_define.hats"
#include "share/atspre_staload.hats"

staload UN = "prelude/SATS/unsafe.sats" // FIXME: Get rid of this --------------------------------------

staload "proofs.sats"
staload "array2d.sats"

implement {t}
arr2get {m, n} {na} {i, j} (m, a, i, j) =
  let
    prval _ = mul_gte_gte_gte {j, m} ()
    prval _ = mul_compare_lte {j, n - 1, m} ()
    prval _ = prop_verify {0 <= i + (j * m) && i + (j * m) < na} ()
  in
    a[i + (j * m)]
  end

implement {t}
arr2put {m, n} {na} {i, j} (m, a, i, j, x) =
  let
    prval _ = mul_gte_gte_gte {j, m} ()
    prval _ = mul_compare_lte {j, n - 1, m} ()
    prval _ = prop_verify {0 <= i + (j * m) && i + (j * m) < na} ()
  in
    a[i + (j * m)] := x
  end

implement {t}
arr2copy {m, n1, n2} {na1, na2} {q, r} {i1, j1} {i2, j2}
         (m, a1, a2, q, r, i1, j1, i2, j2) =
  let
    implement
    arr2map$filter<t> (t) = t
  in
    arr2map {m, n1, n2} (m, a1, a2, q, r, i1, j1, i2, j2)
  end

implement {t}
arr2map {m, n1, n2} {na1, na2} {q, r} {i1, j1} {i2, j2}
        (m, a1, a2, q, r, i1, j1, i2, j2) =
  let
    fun
    outer_loop {j_a1 : int | j1 <= j_a1; j_a1 <= j1 + r}
               .<(j1 + r) - j_a1>.
               (a1   : &array(t, na1),
                a2   : &array(t, na2),
                j_a1 : size_t j_a1) : void =
      let
        fun
        inner_loop {i_a1, j_a1, j_a2 : int
                      | i1 <= i_a1; i_a1 <= i1 + q;
                        j1 <= j_a1; j_a1 < j1 + r;
                        j2 <= j_a2; j_a2 < j2 + r}
                   .<(i1 + q) - i_a1>.
                   (a1   : &array(t, na1),
                    a2   : &array(t, na2),
                    i_a1 : size_t i_a1,
                    j_a1 : size_t j_a1,
                    j_a2 : size_t j_a2) : void =
          if i_a1 < i1 + q then
            let
              val i_a2 = (i_a1 - i1) + i2
              val x = arr2get {m, n1} (m, a1, i_a1, j_a1)
              val y = arr2map$filter(x)
              val _ = arr2put {m, n2} (m, a2, i_a2, j_a2, y)
            in
              inner_loop (a1, a2, succ i_a1, j_a1, j_a2)
            end
      in
        if j_a1 < j1 + r then
          let
            val j_a2 = (j_a1 - j1) + j2
            val _ = inner_loop (a1, a2, i1, j_a1, j_a2)
          in
            outer_loop (a1, a2, succ j_a1)
          end
      end
  in
    outer_loop (a1, a2, j1)
  end
